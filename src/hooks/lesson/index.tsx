/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useAtom } from "jotai";
import { useRequest } from "ahooks";

import { lessonListAtom } from "@/src/jotai/lesson";
import {
  assignLesson,
  deleteLesson,
  getMyLessons,
  markLessonDone,
  updateLesson,
} from "@/src/services/lessons";
import { useAuth } from "../auth";

export const useLesson = () => {
  const { userInfo } = useAuth();
  const [myLessons, setMyLessons] = useAtom(lessonListAtom);

  // üìö L·∫•y danh s√°ch b√†i h·ªçc c·ªßa h·ªçc sinh
  const requestGetMyLessons = useRequest(
    () => getMyLessons(userInfo?.token as string),
    {
      manual: true,
      onSuccess: (res: any) => {
        setMyLessons(res?.lessons || []);
      },
      onError: (err: any) => {
        console.error("L·ªói l·∫•y danh s√°ch b√†i h·ªçc:", err);
      },
    }
  );

  // üìö Giao b√†i h·ªçc
  const requestAssignLesson = useRequest(
    (data: any) => assignLesson(data, userInfo?.token as string),
    {
      manual: true,
      onSuccess: () => {
        // N·∫øu ƒëang ·ªü giao di·ªán danh s√°ch c·ªßa h·ªçc sinh th√¨ c√≥ th·ªÉ reload
        requestGetMyLessons.runAsync();
      },
      onError: (err: any) => {
        console.error("L·ªói giao b√†i h·ªçc:", err);
      },
    }
  );

  // üìö ƒê√°nh d·∫•u ho√†n th√†nh
  const requestMarkLessonDone = useRequest(
    (lessonId: string) => markLessonDone(lessonId, userInfo?.token as string),
    {
      manual: true,
      onSuccess: () => {
        requestGetMyLessons.runAsync();
      },
      onError: (err: any) => {
        console.error("L·ªói ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc:", err);
      },
    }
  );

  const requestDeleteLesson = useRequest(
    (lessonId: string) => deleteLesson(lessonId, userInfo?.token as string),
    {
      manual: true,
      onSuccess: () => {
        requestGetMyLessons.runAsync();
      },
      onError: (err: any) => {
        console.error("L·ªói xo√° b√†i h·ªçc:", err);
      },
    }
  );

  const requestUpdateLesson = useRequest(
    (data: any) => updateLesson(data, userInfo?.token as string),
    {
      manual: true,
      onSuccess: () => {
        requestGetMyLessons.runAsync();
      },
      onError: (err: any) => {
        console.error("L·ªói c·∫≠p nh·∫≠t b√†i h·ªçc:", err);
      },
    }
  );

  return {
    myLessons,
    requestGetMyLessons,
    requestAssignLesson,
    requestMarkLessonDone,
    requestDeleteLesson,
    requestUpdateLesson,
  };
};
